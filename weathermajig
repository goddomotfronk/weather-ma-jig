#!/usr/bin/env bash
yahoo_app_id="yGv9NWHV34GQ4FyA6.COP1blzCbYjHD3IzLJhlmK.b.4YpCWqv.D6LxDUodHiNyDGg--"

show_help() {
  cat<<USE
  USAGE: 
    weather-ma-jig <place>
  OPTIONS:
    --short|-s: short output
  EXAMPLE: 
    weather-ma-jig Boulder
USE
}

discern_city() {
  place=$(curl -s ipinfo.io | grep city | awk '{print $2}' | tr -d '",')
  place_url="${place/ /%20}"
}

setup_emoji() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    sun="üåû "
    snow="‚ùÑÔ∏è "
    rain="‚òî "
    cloud="‚õÖ "
    default="üåè "
  else
    sun="‚òÄ"
    snow="‚ùÑ"
    rain="‚òÇ"
    cloud="‚òÅ"
    default="‚úî"
  fi
}

check_woeid() {
  woeid=$(curl -s "http://where.yahooapis.com/v1/places.q(${place_url})?appid=${yahoo_app_id}" | grep -i woeid | sed 's/.*<woeid>\(.*\)<\/woeid>.*/\1/')

  if [[ -z "$woeid" ]]; then
      printf "$place? Nope.\n"
      exit 1
  fi
}

set_dow() {
  dow=$(date +%a)
  if [[ $(uname -s) == "Darwin" ]]; then
    next_dow="$(date -v+1d +%a)"
  else
    next_dow="$(date -d "+1 day" +%a)"
  fi

  today=1
}

get_forecast() {
  weather_xml=$(curl -s "http://weather.yahooapis.com/forecastrss?u=f&w=${woeid}")
  city=$(echo "${weather_xml}" | grep -m 1 -i '<title>Yahoo! Weather' | sed 's/.*<title>Yahoo! Weather - \([^"]*\)<\/title>.*/\1/')
  cur_temp=$(echo "${weather_xml}" | grep -m 1 -i '<yweather:condition' | sed -e 's/.*temp="\([0-9]*\)" .*/\1¬∫F/')

  dow_ln=$(echo "${weather_xml}" | grep -m 1 -i "<yweather:forecast day=\"${dow}\"")

  if [ -z "$dow_ln" ]; then
      dow_ln=$(echo "${weather_xml}" | grep -m 1 -i "<yweather:forecast day=\"${next_dow}\"")
      today=0
  fi

  forecast=$(echo "${dow_ln}" | sed -e "s/.*low=\"\(.*\)\" high=\"\(.*\)\" text=\"\([a-zA-Z \\\/_\|,]*\)\" .*/\2¬∫F \1¬∫F \3/")
}

setup_output() {
  IFS=' ' read -r high low conditions < <(echo $forecast)

  if (( "$today" == 1 )); then
      date_string=$(date +"%A, %B %d %Y")
  else
    if [[ $(uname -s) == 'Darwin' ]]; then
      date_string=$(date -v+1d +"%A, %B %d %Y")
    else
      date_string=$(date -d "+1 day" +"%A, %B %d %Y")
    fi
  fi
}

discern_emoji() {
  case "$conditions" in
    *Sun*)
      emoji="$sun"
      ;;
    *Snow*)
      emoji="$snow"
      ;;
    *Storm*|*Rain*|*Shower*|*Drizzle*)
      emoji="$rain"
      ;;
    *Cloud*)
      emoji="$cloud"
      ;;
    *)
      emoji="$default"
  esac
}

echo_output() {
  if (( "$short" == 0 )); then
    printf "$date_string\nForecast for $city\n===========================\nCURRENTLY: $cur_temp\nHIGH: $high\nLOW: $low\n$emoji $conditions\n";
    exit 0
  fi

  printf "$emoji $conditions [$cur_temp]\n";
}

init() {
  setup_emoji
  check_woeid
  set_dow
  get_forecast
  setup_output
  discern_emoji
  echo_output
}

main() {
  short=0

  while [ -n "$1" ]; do
    case "$1" in
      --short|-s)
        short=1
        ;;
      --help|-h)
        show_help
        exit 0
        ;;
      *)
        place="$1"
        place_url="${1/ /%20}"
    esac
    shift
  done

  if [[ -z "$place" ]]; then
    discern_city
  fi

  init
}

if [[ -z "$yahoo_app_id" ]]; then
  printf "App id must be set"
else
  main "$@"
fi
